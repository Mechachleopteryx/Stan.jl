// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace TestModel_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class TestModel_model : public prob_grad {
private:
    int Nobs;
    int Nsubj;
    vector<int> SubjIdx;
    vector<int> y;
public:
    TestModel_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    TestModel_model(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "TestModel_model_namespace::TestModel_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "Nobs", "int", context__.to_vec());
        Nobs = int(0);
        vals_i__ = context__.vals_i("Nobs");
        pos__ = 0;
        Nobs = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Nsubj", "int", context__.to_vec());
        Nsubj = int(0);
        vals_i__ = context__.vals_i("Nsubj");
        pos__ = 0;
        Nsubj = vals_i__[pos__++];
        context__.validate_dims("data initialization", "SubjIdx", "int", context__.to_vec(Nobs));
        validate_non_negative_index("SubjIdx", "Nobs", Nobs);
        SubjIdx = std::vector<int>(Nobs,int(0));
        vals_i__ = context__.vals_i("SubjIdx");
        pos__ = 0;
        size_t SubjIdx_limit_0__ = Nobs;
        for (size_t i_0__ = 0; i_0__ < SubjIdx_limit_0__; ++i_0__) {
            SubjIdx[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(Nobs));
        validate_non_negative_index("y", "Nobs", Nobs);
        y = std::vector<int>(Nobs,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = Nobs;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"Nobs",Nobs,1);
        check_greater_or_equal(function__,"Nsubj",Nsubj,1);
        for (int k0__ = 0; k0__ < Nobs; ++k0__) {
            check_greater_or_equal(function__,"SubjIdx[k0__]",SubjIdx[k0__],1);
        }
        for (int k0__ = 0; k0__ < Nobs; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            check_less_or_equal(function__,"y[k0__]",y[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += Nsubj;
    }

    ~TestModel_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("omega")))
            throw std::runtime_error("variable omega missing");
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        context__.validate_dims("initialization", "omega", "double", context__.to_vec());
        // generate_declaration omega
        double omega(0);
        omega = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,omega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable omega: ") + e.what());
        }

        if (!(context__.contains_r("kappa")))
            throw std::runtime_error("variable kappa missing");
        vals_r__ = context__.vals_r("kappa");
        pos__ = 0U;
        context__.validate_dims("initialization", "kappa", "double", context__.to_vec());
        // generate_declaration kappa
        double kappa(0);
        kappa = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,kappa);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable kappa: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta", "vector_d", context__.to_vec(Nsubj));
        // generate_declaration theta
        vector_d theta(static_cast<Eigen::VectorXd::Index>(Nsubj));
        for (int j1__ = 0U; j1__ < Nsubj; ++j1__)
            theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ omega;
        (void) omega;  // dummy to suppress unused var warning
        if (jacobian__)
            omega = in__.scalar_lb_constrain(0,lp__);
        else
            omega = in__.scalar_lb_constrain(0);

        T__ kappa;
        (void) kappa;  // dummy to suppress unused var warning
        if (jacobian__)
            kappa = in__.scalar_lub_constrain(0,1,lp__);
        else
            kappa = in__.scalar_lub_constrain(0,1);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  theta;
        (void) theta;  // dummy to suppress unused var warning
        if (jacobian__)
            theta = in__.vector_lub_constrain(0,1,Nsubj,lp__);
        else
            theta = in__.vector_lub_constrain(0,1,Nsubj);


        // transformed parameters
        T__ A;
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, DUMMY_VAR__);
        stan::math::fill(A,DUMMY_VAR__);
        T__ B;
        (void) B;  // dummy to suppress unused var warning
        stan::math::initialize(B, DUMMY_VAR__);
        stan::math::fill(B,DUMMY_VAR__);


        try {
            current_statement_begin__ = 15;
            stan::math::assign(A, (kappa * omega));
            current_statement_begin__ = 16;
            stan::math::assign(B, ((1 - kappa) * omega));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        if (stan::math::is_uninitialized(A)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: A";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(B)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: B";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"A",A,0);
        check_greater_or_equal(function__,"B",B,0);

        // model body
        try {

            current_statement_begin__ = 19;
            lp_accum__.add(gamma_log<propto__>(omega, 2, 3));
            current_statement_begin__ = 20;
            lp_accum__.add(beta_log<propto__>(kappa, 7, 3));
            current_statement_begin__ = 21;
            lp_accum__.add(beta_log<propto__>(theta, A, B));
            current_statement_begin__ = 22;
            for (int obs = 1; obs <= Nobs; ++obs) {

                current_statement_begin__ = 23;
                lp_accum__.add(bernoulli_log<propto__>(get_base1(y,obs,"y",1), get_base1(theta,get_base1(SubjIdx,obs,"SubjIdx",1),"theta",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("omega");
        names__.push_back("kappa");
        names__.push_back("theta");
        names__.push_back("A");
        names__.push_back("B");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "TestModel_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double omega = in__.scalar_lb_constrain(0);
        double kappa = in__.scalar_lub_constrain(0,1);
        vector_d theta = in__.vector_lub_constrain(0,1,Nsubj);
        vars__.push_back(omega);
        vars__.push_back(kappa);
        for (int k_0__ = 0; k_0__ < Nsubj; ++k_0__) {
            vars__.push_back(theta[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        double A(0.0);
        (void) A;  // dummy to suppress unused var warning
        stan::math::initialize(A, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(A,DUMMY_VAR__);
        double B(0.0);
        (void) B;  // dummy to suppress unused var warning
        stan::math::initialize(B, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(B,DUMMY_VAR__);


        try {
            current_statement_begin__ = 15;
            stan::math::assign(A, (kappa * omega));
            current_statement_begin__ = 16;
            stan::math::assign(B, ((1 - kappa) * omega));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"A",A,0);
        check_greater_or_equal(function__,"B",B,0);

        // write transformed parameters
        vars__.push_back(A);
        vars__.push_back(B);

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "TestModel_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "A";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= Nsubj; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "A";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }

}; // model

} // namespace

typedef TestModel_model_namespace::TestModel_model stan_model;

